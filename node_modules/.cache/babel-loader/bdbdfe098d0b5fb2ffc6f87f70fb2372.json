{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Angela He/treehacks/src/components/ThoughtPost.js\";\nimport React, { Component } from 'react';\nimport Avatar from './Avatar';\nimport CommentBox from './CommentBox';\nimport CommentBut from './CommentBut';\n/*\n\nprops:\n -PpfURL : string (optional)\n  -name : string\n  -isMyPost : bool\n  -timestamp : string - e.g. a few seconds ago\n  -thought\n  -conversation : array\n\n  - example of conversation: \n    [\n      {\n        uid: 'fdsadsadaad'\n        PpfURL: '...'\n        poster: true //is message from poster,\n        timestamp: '..\n        message: 'hi i love'\n        \n      },\n     ...\n    ]\n\n*/\n\nvar convoListen;\n\nvar Conversation = function Conversation(props) {\n  var classN;\n\n  if (props.poster) {\n    classN = 'reply';\n  } else {\n    classN = 'comment';\n  }\n\n  return React.createElement(\"div\", {\n    className: classN,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    PpfURL: props.PpfURL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.message));\n};\n\nvar ThoughtPost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ThoughtPost, _React$Component);\n\n  function ThoughtPost(props) {\n    var _this;\n\n    _classCallCheck(this, ThoughtPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThoughtPost).call(this, props));\n\n    _this.loadComments = function () {\n      _this.setState({\n        showComments: !_this.state.showComments\n      });\n    };\n\n    _this.state = {\n      conversation: [],\n      conversationLength: 0,\n      showComments: false\n    };\n    return _this;\n  }\n\n  _createClass(ThoughtPost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var tempConvo = [];\n      convoListen = this.props.firebase.posts().doc(this.props.postid).collection(\"conversation\").onSnapshot(function (snapshot) {\n        //var cities = [];\n        snapshot.forEach(function (doc) {\n          console.log(doc.id);\n          tempConvo.push({\n            uid: doc.data().uid,\n            PpfURL: '...',\n            poster: doc.data().poster,\n            message: doc.data().message\n          });\n        });\n        console.log(tempConvo);\n\n        _this2.setState({\n          conversation: tempConvo,\n          conversationLength: snapshot.doc.length\n        });\n      });\n      /*this.props.firebase.post(this.props.postid).collection(\"conversation\")\n          .onSnapshot(function(snapshot) {\n          \n          //snapshot.docChanges().forEach(function(change) {\n          console.log(\"snapshot \" + snapshot.size);\n          snapshot.forEach(function(doc) {\n              //cities.push(doc.data().name);\n              console.log(\"id \" + doc.id);\n              tempConvo.push({\n                  uid: doc.data().uid,\n                  PpfURL: '...',\n                  poster: doc.data().poster,\n                  message: doc.data().message,\n              })\n          });\n          console.log(tempConvo);\n          element.setState(prevState => ({\n              //conversation: element.state.conversation.concat(tempConvo)\n              conversation:tempConvo\n          }))\n      });*/\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {//convoListen.detach();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var editButton = null;\n\n      if (this.props.isMyPost) {\n        editButton = React.createElement(\"button\", {\n          className: \"user-edit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"jam jam-pencil\",\n          style: {\n            color: '#EFF0DA'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      }\n\n      var convo = [];\n\n      if (this.state.showComments) {\n        for (var i = 0; i < this.state.conversation; i++) {\n          var msg = this.state.conversation[i];\n          convo.push(React.createElement(Conversation, {\n            PpfURL: msg.PpfURL,\n            poster: msg.poster,\n            message: msg.message,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }));\n        }\n      }\n\n      var thought = React.createElement(Conversation, {\n        PpfURL: this.props.PpfURL,\n        poster: this.props.name,\n        message: this.props.thought,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"thought activity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        PpfURL: this.props.PpfURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"name-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, this.props.name), React.createElement(\"span\", {\n        className: \"sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"\\xA0updated\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, this.props.timestamp))), editButton), thought, convo, React.createElement(CommentBut, {\n        loadComments: this.state.loadComments,\n        commentLength: this.state.conversationLength,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(CommentBox, {\n        uid: this.props.uid,\n        PpfURL: this.props.PpfURL,\n        poster: this.props.name,\n        firebase: this.props.firebase,\n        postid: this.props.postid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ThoughtPost;\n}(React.Component);\n\nexport default ThoughtPost;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/ThoughtPost.js"],"names":["React","Component","Avatar","CommentBox","CommentBut","convoListen","Conversation","props","classN","poster","PpfURL","message","ThoughtPost","loadComments","setState","showComments","state","conversation","conversationLength","tempConvo","firebase","posts","doc","postid","collection","onSnapshot","snapshot","forEach","console","log","id","push","uid","data","length","editButton","isMyPost","color","convo","i","msg","thought","name","timestamp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Avatar from './Avatar';\nimport CommentBox from './CommentBox';\nimport CommentBut from './CommentBut';\n\n/*\n\nprops:\n -PpfURL : string (optional)\n  -name : string\n  -isMyPost : bool\n  -timestamp : string - e.g. a few seconds ago\n  -thought\n  -conversation : array\n\n  - example of conversation: \n    [\n      {\n        uid: 'fdsadsadaad'\n        PpfURL: '...'\n        poster: true //is message from poster,\n        timestamp: '..\n        message: 'hi i love'\n        \n      },\n     ...\n    ]\n\n*/\nlet convoListen;\n\nconst Conversation = (props) => {\n  let classN;\n  if (props.poster) {\n    classN = 'reply';\n  } else {\n    classN = 'comment';\n  }\n\n  return (\n    <div className={classN}>\n      <Avatar PpfURL={props.PpfURL} />\n      <span>{props.message}</span>\n    </div>\n  );\n};\n\nclass ThoughtPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversation: [],\n      conversationLength: 0,\n      showComments: false\n    }\n  }\n  componentDidMount() {\n    var tempConvo = [];\n\n    convoListen = this.props.firebase.posts().doc(this.props.postid).collection(\"conversation\").onSnapshot((snapshot) => {\n      //var cities = [];\n      snapshot.forEach((doc) => {\n        console.log(doc.id);\n        tempConvo.push({\n          uid: doc.data().uid,\n          PpfURL: '...',\n          poster: doc.data().poster,\n          message: doc.data().message,\n        })\n      });\n      console.log(tempConvo);\n      this.setState({\n        conversation: tempConvo,\n        conversationLength: snapshot.doc.length\n      });\n\n    });\n    /*this.props.firebase.post(this.props.postid).collection(\"conversation\")\n        .onSnapshot(function(snapshot) {\n        \n        //snapshot.docChanges().forEach(function(change) {\n        console.log(\"snapshot \" + snapshot.size);\n        snapshot.forEach(function(doc) {\n            //cities.push(doc.data().name);\n            console.log(\"id \" + doc.id);\n            tempConvo.push({\n                uid: doc.data().uid,\n                PpfURL: '...',\n                poster: doc.data().poster,\n                message: doc.data().message,\n            })\n        });\n        console.log(tempConvo);\n        element.setState(prevState => ({\n            //conversation: element.state.conversation.concat(tempConvo)\n            conversation:tempConvo\n        }))\n  });*/\n\n  }\n  componentWillUnmount() {\n    //convoListen.detach();\n  }\n\n\n  loadComments = () => {\n    this.setState({ showComments: !this.state.showComments })\n\n\n  }\n\n\n  render() {\n    let editButton = null;\n    if (this.props.isMyPost) {\n      editButton = (\n        <button className=\"user-edit\">\n          <span className=\"jam jam-pencil\" style={{ color: '#EFF0DA' }}></span>\n        </button>\n      );\n    }\n\n    let convo = [];\n    if (this.state.showComments) {\n      for (var i = 0; i < this.state.conversation; i++) {\n        let msg = this.state.conversation[i];\n        convo.push(\n          <Conversation\n            PpfURL={msg.PpfURL}\n            poster={msg.poster}\n            message={msg.message}\n          />\n        );\n      }\n    }\n\n    let thought = (\n      <Conversation\n        PpfURL={this.props.PpfURL}\n        poster={this.props.name}\n        message={this.props.thought}\n      />\n    );\n\n    return (\n      <div className=\"thought activity\">\n        <div className=\"header\">\n          <Avatar PpfURL={this.props.PpfURL} />\n          <div className=\"name-date\">\n            <div><span className=\"name\">{this.props.name}</span><span className=\"sub\">&nbsp;updated</span></div>\n            <div><span className=\"date\">{this.props.timestamp}</span></div>\n          </div>\n\n          {editButton}\n\n        </div>\n        {thought}\n        {convo}\n\n        <CommentBut\n          loadComments={this.state.loadComments}\n          commentLength={this.state.conversationLength}\n        />\n\n        <CommentBox\n          uid={this.props.uid}\n          PpfURL={this.props.PpfURL}\n          poster={this.props.name}\n          firebase={this.props.firebase}\n          postid={this.props.postid}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ThoughtPost;\n"]},"metadata":{},"sourceType":"module"}