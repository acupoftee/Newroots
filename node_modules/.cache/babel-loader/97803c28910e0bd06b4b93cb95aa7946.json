{"ast":null,"code":"import _classCallCheck from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Angela He/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Angela He/treehacks/src/components/FeedTab.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './ThoughtInput';\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\nvar feedListen;\n\nvar FeedTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FeedTab, _React$Component);\n\n  function FeedTab(props) {\n    var _this;\n\n    _classCallCheck(this, FeedTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedTab).call(this, props));\n    _this.state = {\n      thoughts: [],\n      checkins: [] //this.processTime = this.processTime.bind(this);\n\n    };\n    return _this;\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n   - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n\n\n  _createClass(FeedTab, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      autosize($('textarea'));\n      var element = this;\n      var tempFeed = [];\n      var tempCheckins = this.state.checkins;\n      var tempThoughts = this.state.thoughts;\n      feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\").onSnapshot(function (snapshot) {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach(function (change) {\n          console.log(\"changety[e]: \" + change.type);\n\n          if (change.type === \"added\") {\n            console.log(\"New city: \", change.doc.data());\n            tempFeed.push(change.doc.id);\n            var dat = change.doc.data();\n\n            if (change.doc.data().checkin) {\n              tempCheckins.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                timestamp: moment(dat.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: dat.checkinData\n              });\n            } else {\n              tempThoughts.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                thought: dat.thought,\n                message: dat.message,\n                comments: dat.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(dat.timestamp).format('lll')\n              });\n            }\n          }\n        });\n        console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));\n        element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        });\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      feedListen();\n    }\n    /*feed = this.props.feed;\n     for (var i = 0; i< feed.length; i++){\n      \n    }*/\n\n    /*<ThoughtPost /> \n    const listItems = numbers.map((number) =>\n      <li>{number}</li>\n    );\n    */\n    //const checkins = this.state.checkins;\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var checkinItems = this.state.checkins.map(function (checkin, index) {\n        return React.createElement(CheckinPost, {\n          uid: _this2.props.uid,\n          posterUid: checkin.uid,\n          PpfURL: checkin.PpfURL,\n          key: toString(index),\n          name: checkin.name,\n          timestamp: checkin.timestamp,\n          postid: checkin.postid,\n          checkinData: checkin.checkinData,\n          firebase: _this2.props.firebase,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      });\n      var thoughtItems = this.state.thoughts.map(function (thought, index) {\n        return React.createElement(ThoughtPost, {\n          uid: _this2.props.uid,\n          posterUid: thought.uid,\n          PpfURL: thought.PpfURL,\n          key: toString(index),\n          name: thought.name,\n          thought: thought.thought,\n          timestamp: thought.timestamp,\n          message: thought.message,\n          postid: thought.postid,\n          firebase: _this2.props.firebase,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"section\", {\n        className: \"feed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(ThoughtInput, {\n        PpfURL: this.props.PpfURL,\n        name: this.props.name,\n        uid: this.props.uid,\n        network: this.props.network,\n        firebase: this.props.firebase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"date-marker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"February 17\"), checkinItems, thoughtItems, React.createElement(ErrorMsg, {\n        src: graphics1,\n        header: \"Nothing more.\",\n        msg: \"Why not post a thought?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FeedTab;\n}(React.Component);\n\nexport default FeedTab;","map":{"version":3,"sources":["/Volumes/Angela He/treehacks/src/components/FeedTab.js"],"names":["React","Component","$","autosize","CheckinPost","ThoughtPost","moment","ThoughtInput","graphics1","ErrorMsg","feedListen","FeedTab","props","state","thoughts","checkins","element","tempFeed","tempCheckins","tempThoughts","firebase","user","uid","collection","onSnapshot","snapshot","docChanges","forEach","change","console","log","type","doc","data","push","id","dat","checkin","unshift","name","PpfURL","timestamp","format","postid","checkinData","thought","message","comments","comm_cont","conversation","JSON","stringify","setState","checkinItems","map","index","toString","thoughtItems","network"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport autosize from 'autosize';\nimport CheckinPost from './CheckinPost';\nimport ThoughtPost from './ThoughtPost';\nimport moment from 'moment';\nimport ThoughtInput from './ThoughtInput';\n\nimport graphics1 from '../graphics/1.png';\nimport ErrorMsg from './ErrorMsg';\n\nlet feedListen;\n\nclass FeedTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n      checkins: [],\n\n    }\n    //this.processTime = this.processTime.bind(this);\n  }\n  /*\n    -PpfURL : string (optional)\n    -name : string\n    -isMyPost : bool\n    -timestamp : string - e.g. a few seconds ago\n    -conversation : array\n\n  - example of conversation: \n  [\n    {\n      uid: 'fdsadsadaad'\n      PpfURL: '...'\n      poster: true //is message from poster\n      message: 'hi i love'\n      \n    },\n   ...\n  ]\n  */\n  componentDidMount() {\n    autosize($('textarea'));\n    let element = this;\n    let tempFeed = [];\n    let tempCheckins = this.state.checkins;\n    let tempThoughts = this.state.thoughts;\n    feedListen = this.props.firebase.user(this.props.uid).collection(\"feed\")\n      .onSnapshot((snapshot) => {\n        //let tempFeed = [];\n        snapshot.docChanges().forEach((change) => {\n          console.log(\"changety[e]: \" + change.type);\n          if (change.type === \"added\") {\n            console.log(\"New city: \", change.doc.data());\n            tempFeed.push(change.doc.id);\n            let dat = change.doc.data();\n            if (change.doc.data().checkin) {\n              tempCheckins.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                timestamp: moment(dat.timestamp).format('lll'),\n                postid: change.doc.id,\n                checkinData: dat.checkinData\n              })\n            }\n            else {\n              tempThoughts.unshift({\n                uid: dat.uid,\n                name: dat.name,\n                PpfURL: dat.PpfURL,\n                thought: dat.thought,\n                message: dat.message,\n                comments: dat.comm_cont,\n                conversation: [],\n                postid: change.doc.id,\n                timestamp: moment(dat.timestamp).format('lll'),\n              })\n            }\n          }\n\n        });\n        console.log(JSON.stringify(tempCheckins));\n        console.log(JSON.stringify(tempThoughts));\n        element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })\n        /*element.setState({\n          checkins: tempCheckins,\n          thoughts: tempThoughts\n        })*/\n      });\n  }\n  componentWillUnmount() {\n    feedListen();\n  }\n\n  /*feed = this.props.feed;\n\n  for (var i = 0; i< feed.length; i++){\n    \n  }*/\n  /*<ThoughtPost /> \n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  */\n  //const checkins = this.state.checkins;\n  render() {\n\n    let checkinItems = this.state.checkins.map((checkin, index) =>\n      <CheckinPost\n        uid={this.props.uid}\n        posterUid={checkin.uid}\n\n        PpfURL={checkin.PpfURL}\n        key={toString(index)}\n        name={checkin.name}\n        timestamp={checkin.timestamp}\n\n        postid={checkin.postid}\n        checkinData={checkin.checkinData}\n        firebase={this.props.firebase}\n      />\n    );\n    let thoughtItems = this.state.thoughts.map((thought, index) =>\n      <ThoughtPost\n        uid={this.props.uid}\n        posterUid={thought.uid}\n\n        PpfURL={thought.PpfURL}\n        key={toString(index)}\n        name={thought.name}\n        thought={thought.thought}\n        timestamp={thought.timestamp}\n        \n        message={thought.message}\n        postid={thought.postid}\n        firebase={this.props.firebase\n        } />\n    );\n\n\n    return (\n\n      <section className=\"feed\">\n        <ThoughtInput\n          PpfURL={this.props.PpfURL}\n          name={this.props.name}\n          uid={this.props.uid}\n          network={this.props.network}\n          firebase={this.props.firebase}\n        />\n        <h1 className=\"date-marker\">February 17</h1>\n        {checkinItems}\n        {thoughtItems}\n\n\n        <ErrorMsg\n          src={graphics1}\n          header='Nothing more.'\n          msg='Why not post a thought?'\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default FeedTab;\n"]},"metadata":{},"sourceType":"module"}