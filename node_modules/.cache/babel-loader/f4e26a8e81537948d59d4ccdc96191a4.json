{"ast":null,"code":"import _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/components/ThoughtPost.js\";\nimport React, { Component } from 'react';\nimport Avatar from './Avatar';\n/*\n\nprops:\n -PpfURL : string (optional)\n  -name : string\n  -isMyPost : bool\n  -timestamp : string - e.g. a few seconds ago\n  -conversation : array\n\n  - example of conversation: \n    [\n      {\n        uid: 'fdsadsadaad'\n        PpfURL: '...'\n        poster: true //is message from poster\n        message: 'hi i love'\n        \n      },\n     ...\n    ]\n\n*/\n\nvar convoListen;\n\nvar Conversation = function Conversation(props) {\n  var classN;\n\n  if (props.poster) {\n    classN = 'reply';\n  } else {\n    classN = 'comment';\n  }\n\n  return React.createElement(\"div\", {\n    className: classN,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    PpfURL: props.PpfURL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, props.message));\n};\n\nvar ThoughtPost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ThoughtPost, _React$Component);\n\n  function ThoughtPost(props) {\n    var _this;\n\n    _classCallCheck(this, ThoughtPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThoughtPost).call(this, props));\n    _this.state = {\n      conversation: []\n    };\n    return _this;\n  }\n\n  _createClass(ThoughtPost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var tempConvo = [];\n      var element = this;\n      console.log(this.props.postid);\n      this.props.firebase.post(this.props.postid).orderBy(\"timestamp\").onSnapshot(function (querySnapshot) {\n        querySnapshot.docChanges().forEach(function (change) {\n          //querySnapshot.forEach(function(doc) {\n          //cities.push(doc.data().name);\n          console.log(change.doc.id);\n          tempConvo.push({\n            uid: change.doc.data().uid,\n            PpfURL: '...',\n            poster: change.doc.data().poster,\n            message: change.doc.data().message\n          });\n        });\n        /*element.setState({\n            conversation:tempConvo\n        })*/\n\n        console.log(tempConvo);\n        element.setState(function (prevState) {\n          return {\n            conversation: element.state.conversation.concat(tempConvo)\n          };\n        }); //console.log(\"Current cities in CA: \", cities.join(\", \"));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var editButton = null;\n\n      if (this.props.isMyPost) {\n        editButton = React.createElement(\"button\", {\n          className: \"user-edit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"jam jam-pencil\",\n          style: {\n            color: '#EFF0DA'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }));\n      }\n\n      var convo = [];\n\n      for (var i = 0; i < this.props.conversation; i++) {\n        var msg = this.state.conversation[i];\n        convo.push(React.createElement(Conversation, {\n          PpfURL: msg.PpfURL,\n          poster: msg.poster,\n          message: msg.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"thought activity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        PpfURL: this.props.PpfURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"name-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.props.name), React.createElement(\"span\", {\n        className: \"sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"\\xA0updated\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.props.timestamp))), editButton), convo, React.createElement(\"div\", {\n        className: \"leave-comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"comment..\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"jam jam-paper-plane\",\n        style: {\n          color: '#9FC6C1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ThoughtPost;\n}(React.Component);\n\nexport default ThoughtPost;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/components/ThoughtPost.js"],"names":["React","Component","Avatar","convoListen","Conversation","props","classN","poster","PpfURL","message","ThoughtPost","state","conversation","tempConvo","element","console","log","postid","firebase","post","orderBy","onSnapshot","querySnapshot","docChanges","forEach","change","doc","id","push","uid","data","setState","prevState","concat","editButton","isMyPost","color","convo","i","msg","name","timestamp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Avatar from './Avatar';\n\n/*\n\nprops:\n -PpfURL : string (optional)\n  -name : string\n  -isMyPost : bool\n  -timestamp : string - e.g. a few seconds ago\n  -conversation : array\n\n  - example of conversation: \n    [\n      {\n        uid: 'fdsadsadaad'\n        PpfURL: '...'\n        poster: true //is message from poster\n        message: 'hi i love'\n        \n      },\n     ...\n    ]\n\n*/\nlet convoListen;\n\nconst Conversation = (props) => {\n  let classN;\n  if (props.poster){\n    classN = 'reply';\n  }else{\n    classN = 'comment';\n  }\n\n  return (\n    <div className={classN}>\n      <Avatar PpfURL={props.PpfURL} />\n      <span>{props.message}</span>\n    </div>\n  );\n};\n\nclass ThoughtPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        conversation:[]\n    }\n  }\n  componentDidMount() {\n      var tempConvo = [];\n      const element = this;\n      console.log(this.props.postid);\n      this.props.firebase.post(this.props.postid).orderBy(\"timestamp\")\n          .onSnapshot(function(querySnapshot) {\n            \n            querySnapshot.docChanges().forEach(function (change) {\n            //querySnapshot.forEach(function(doc) {\n                //cities.push(doc.data().name);\n                console.log(change.doc.id);\n                tempConvo.push({\n                    uid: change.doc.data().uid,\n                    PpfURL: '...',\n                    poster: change.doc.data().poster,\n                    message: change.doc.data().message,\n                })\n            });\n            /*element.setState({\n                conversation:tempConvo\n            })*/\n          console.log(tempConvo);\n            element.setState(prevState => ({\n                conversation: element.state.conversation.concat(tempConvo)\n            }))\n            //console.log(\"Current cities in CA: \", cities.join(\", \"));\n      });\n\n  }\n    \n  render() {\n    let editButton = null;\n    if (this.props.isMyPost) {\n      editButton = (\n        <button className=\"user-edit\">\n          <span className=\"jam jam-pencil\" style={{ color: '#EFF0DA' }}></span>\n        </button>\n      );\n    }\n\n    let convo = [];\n    for (var i = 0; i< this.props.conversation; i++){\n      let msg = this.state.conversation[i];\n      convo.push (\n        <Conversation\n          PpfURL =  {msg.PpfURL}\n          poster = {msg.poster}\n          message = {msg.message}\n         />\n      );\n    }\n\n    return (\n      <div className=\"thought activity\">\n        <div className=\"header\">\n          <Avatar PpfURL={this.props.PpfURL} />\n          <div className=\"name-date\">\n            <div><span className=\"name\">{this.props.name}</span><span className=\"sub\">&nbsp;updated</span></div>\n            <div><span className=\"date\">{this.props.timestamp}</span></div>\n          </div>\n\n          {editButton}\n\n        </div>\n            {convo}\n            \n        <div className=\"leave-comment\">\n          <input type=\"text\" placeholder=\"comment..\" />\n          <button><span className=\"jam jam-paper-plane\" style={{ color: '#9FC6C1' }}></span></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ThoughtPost;\n"]},"metadata":{},"sourceType":"module"}