{"ast":null,"code":"import _objectSpread from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gollyzoom/Documents/GitHub/treehacks/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gollyzoom/Documents/GitHub/treehacks/src/App.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport './App.css';\nimport NavBar from './components/NavBar.js'; //import CheckinModal from './components/CheckinModal.js';\n\nimport FeedTab from './components/FeedTab.js';\nimport HomePage from './components/HomePage.js';\nimport NetworkTab from './components/NetworkTab.js';\nimport UserTab from './components/UserTab.js';\nimport { withFirebase } from './components/Firebase';\nvar UserTabFB = withFirebase(UserTab);\nvar NetworkTabFB = withFirebase(NetworkTab);\nvar NavBarFB = withFirebase(NavBar); //let feedListen;\n\nvar data = {\n  baseURL: '',\n  activeTab: 0,\n  userData: null,\n  feed: []\n},\n    userBase = 'users';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.fillFeed = function () {};\n\n    _this.SignUp = function (userData) {\n      _this.setState({\n        userData: userData\n      });\n    };\n\n    _this.checkLogin = function (userData) {\n      _this.setState({\n        userData: userData\n      });\n    };\n\n    _this.updateCheckin = function () {\n      _this.setState({\n        userData: _objectSpread({}, _this.state.userData, {\n          lastCheckin: moment().format('L')\n        })\n      });\n    };\n\n    _this.needToCheckin = function () {\n      if (_this.state.userData.lastCheckin != moment().format('L')) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    _this.setPpfURL = function (downloadURL) {\n      _this.setState({\n        userData: _objectSpread({}, _this.state.userData, {\n          PpfURL: downloadURL\n        })\n      });\n    };\n\n    _this.setActiveTab = function (index) {\n      _this.setState({\n        activeTab: index\n      });\n    };\n\n    _this.setName = function (name) {\n      _this.setState({\n        userData: _objectSpread({}, _this.state.userData, {\n          name: name\n        })\n      });\n    };\n\n    _this.setCheckins = function (checkins) {\n      _this.setState({\n        userData: _objectSpread({}, _this.state.userData, {\n          checkins: checkins\n        })\n      });\n    };\n\n    _this.setNetwork = function (network) {\n      _this.setState({\n        userData: _objectSpread({}, _this.state.userData, {\n          network: network\n        })\n      });\n    };\n\n    _this.setRequests = function (requests) {\n      _this.setState({\n        userData: _objectSpread({}, _this.state.userData, {\n          requests: requests\n        })\n      });\n    };\n\n    _this.logout = function () {\n      _this.setState({\n        userData: null\n      });\n    };\n\n    _this.state = data;\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//listen for network requests\n      //fix - firebase doesnt exist in this xontentxt - maybe just have this code on compoenents that need it\n\n      /*feedListen = firebase.firestore().collection(\"users\").doc(this.state.userData.uid).collection(\"feed\")\n        .onSnapshot(function(snapshot) {\n            let tempFeed = [];\n            snapshot.docChanges().forEach(function(change) {\n                \n                if (change.type === \"added\") {\n                    //console.log(\"New city: \", change.doc.data());\n                    tempFeed.push(change.doc.id);\n                }\n                \n            });\n            this.setState({\n                feed:tempFeed\n            })\n        });*/\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {//feedListen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.userData === null) {\n        return React.createElement(HomePage, {\n          checkLogin: this.checkLogin,\n          SignUp: this.SignUp,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        });\n      }\n\n      var activeTab; //active tab is feed\n\n      if (this.state.activeTab == 0) {\n        activeTab = React.createElement(FeedTab, {\n          feed: this.state.feed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        });\n      } //active tab is network\n      else if (this.state.activeTab == 1) {\n          activeTab = React.createElement(NetworkTabFB, {\n            uid: this.state.userData.uid,\n            requests: this.state.userData.requests,\n            network: this.state.userData.network,\n            setRequests: this.setRequests,\n            setNetwork: this.setNetwork,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          });\n        } //active tab is profile\n        else {\n            activeTab = React.createElement(UserTabFB, {\n              logout: this.logout,\n              checkins: this.state.userData.checkins,\n              name: this.state.userData.name,\n              uid: this.state.userData.uid,\n              PpfURL: this.state.userData.PpfURL,\n              setPpfURL: this.setPpfURL,\n              setName: this.setName,\n              setCheckins: this.setCheckins,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 186\n              },\n              __self: this\n            });\n          }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"main-bg-texture\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(NavBarFB, {\n        setActiveTab: this.setActiveTab,\n        requestsLength: this.state.userData.requests.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), activeTab, this.needToCheckin() ? React.createElement(CheckinModal, {\n        updateCheckin: this.updateCheckin,\n        checkins: this.state.userData.checkins,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/gollyzoom/Documents/GitHub/treehacks/src/App.js"],"names":["React","Component","$","moment","NavBar","FeedTab","HomePage","NetworkTab","UserTab","withFirebase","UserTabFB","NetworkTabFB","NavBarFB","data","baseURL","activeTab","userData","feed","userBase","App","props","fillFeed","SignUp","setState","checkLogin","updateCheckin","state","lastCheckin","format","needToCheckin","setPpfURL","downloadURL","PpfURL","setActiveTab","index","setName","name","setCheckins","checkins","setNetwork","network","setRequests","requests","logout","uid","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport moment from 'moment';\n\nimport './App.css';\nimport NavBar from './components/NavBar.js';\n//import CheckinModal from './components/CheckinModal.js';\nimport FeedTab from './components/FeedTab.js';\nimport HomePage from './components/HomePage.js';\nimport NetworkTab from './components/NetworkTab.js';\nimport UserTab from './components/UserTab.js';\n\n\nimport { withFirebase } from './components/Firebase';\n\n\nconst UserTabFB = withFirebase(UserTab);\n\nconst NetworkTabFB = withFirebase(NetworkTab);\n\nconst NavBarFB = withFirebase(NavBar);\n\n//let feedListen;\n\nvar data = {\n  baseURL: '',\n  activeTab: 0,\n  userData: null,\n  feed: []\n},\nuserBase = 'users';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = data;\n  }\n\n  componentDidMount() {\n    //listen for network requests\n    //fix - firebase doesnt exist in this xontentxt - maybe just have this code on compoenents that need it\n      \n      /*feedListen = firebase.firestore().collection(\"users\").doc(this.state.userData.uid).collection(\"feed\")\n        .onSnapshot(function(snapshot) {\n            let tempFeed = [];\n            snapshot.docChanges().forEach(function(change) {\n                \n                if (change.type === \"added\") {\n                    //console.log(\"New city: \", change.doc.data());\n                    tempFeed.push(change.doc.id);\n                }\n                \n            });\n            this.setState({\n                feed:tempFeed\n            })\n        });*/\n  }\n  componentWillUnmount(){\n      //feedListen();\n  }\n\n  fillFeed = () => {\n      \n  }\n\n  SignUp = (userData) => {\n    this.setState({\n      userData:userData,\n    });\n  }\n\n  checkLogin = (userData) => {\n    this.setState({\n      userData: userData,\n    });\n  }\n\n  // update this.state.lastCheckin as well as input checkin data to feed/database\n  updateCheckin = () => {\n    this.setState({\n      userData: {\n        ...this.state.userData,\n        lastCheckin: moment().format('L')\n      }\n    });\n  }\n\n  //check this.state.lastCheckin and see whether user has checked in today\n  needToCheckin = () => {\n    if (this.state.userData.lastCheckin != moment().format('L')) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  setPpfURL = (downloadURL) => {\n    this.setState({\n      userData: {\n        ...this.state.userData,\n        PpfURL: downloadURL\n      }\n    })\n  } \n  \n  setActiveTab = (index) => {\n    this.setState({\n      activeTab: index,\n    });\n  }\n\n  setName = (name)=>{\n    this.setState({\n      userData: \n     { ...this.state.userData,\n      name: name}\n    })\n  }\n\n  setCheckins = (checkins)=>{\n    this.setState({\n      userData: \n     { ...this.state.userData,\n      checkins: checkins}\n    })\n  }\n\n  setNetwork = (network)=>{\n    this.setState({\n      userData: \n     { ...this.state.userData,\n      network: network}\n    })\n  }\n\n  setRequests = (requests)=>{\n    this.setState({\n      userData: \n     { ...this.state.userData,\n      requests: requests}\n    })\n  }\n\n  //logout\n  logout = () => {\n    this.setState({\n      userData: null\n    });\n  }\n\n  render() {\n    if (this.state.userData === null) {\n      return (\n        <HomePage\n          checkLogin={this.checkLogin}\n          SignUp = {this.SignUp}\n        />\n      );\n    }\n    var activeTab;\n    //active tab is feed\n    if (this.state.activeTab == 0) {\n      activeTab = (\n        <FeedTab \n          feed = {this.state.feed}\n        />\n      );\n    }\n    //active tab is network\n    else if (this.state.activeTab == 1) {\n      activeTab = (\n        <NetworkTabFB \n          uid={this.state.userData.uid}\n          requests={this.state.userData.requests}\n          network={this.state.userData.network}\n          setRequests={this.setRequests}\n          setNetwork={this.setNetwork}\n        />\n      );\n    }\n    //active tab is profile\n    else {\n      activeTab = (\n        <UserTabFB\n          logout={this.logout}\n          checkins={this.state.userData.checkins}\n          name={this.state.userData.name}\n          uid={this.state.userData.uid}\n          PpfURL={this.state.userData.PpfURL}\n          setPpfURL={this.setPpfURL}\n          setName = {this.setName}\n          setCheckins = {this.setCheckins}\n        />\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <div className=\"bg\"></div>\n        <div className=\"main-bg-texture\"></div>\n        <NavBarFB\n          setActiveTab={this.setActiveTab}\n          requestsLength={this.state.userData.requests.length}\n        />\n        {activeTab}\n        {this.needToCheckin() ?\n          <CheckinModal\n            updateCheckin={this.updateCheckin}\n            checkins = {this.state.userData.checkins}\n          />\n          : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}